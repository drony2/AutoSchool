//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AutoSchool.DataBase
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BodyType> BodyType { get; set; }
        public virtual DbSet<Car> Car { get; set; }
        public virtual DbSet<CarBrand> CarBrand { get; set; }
        public virtual DbSet<CarDistribution> CarDistribution { get; set; }
        public virtual DbSet<Categories> Categories { get; set; }
        public virtual DbSet<Color> Color { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<Course> Course { get; set; }
        public virtual DbSet<DecommissionedCars> DecommissionedCars { get; set; }
        public virtual DbSet<Drive> Drive { get; set; }
        public virtual DbSet<ElementsBeingWorkedOut> ElementsBeingWorkedOut { get; set; }
        public virtual DbSet<Employee> Employee { get; set; }
        public virtual DbSet<EngineCapacity> EngineCapacity { get; set; }
        public virtual DbSet<Groups> Groups { get; set; }
        public virtual DbSet<GroupStudent> GroupStudent { get; set; }
        public virtual DbSet<History> History { get; set; }
        public virtual DbSet<Lessons> Lessons { get; set; }
        public virtual DbSet<Marks> Marks { get; set; }
        public virtual DbSet<PlacesStudy> PlacesStudy { get; set; }
        public virtual DbSet<Post> Post { get; set; }
        public virtual DbSet<Student> Student { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TheoreticalClasses> TheoreticalClasses { get; set; }
        public virtual DbSet<TypeKPP> TypeKPP { get; set; }
        public virtual DbSet<CARr> CARr { get; set; }
        public virtual DbSet<Employe> Employe { get; set; }
        public virtual DbSet<Student_Group> Student_Group { get; set; }
    
        [DbFunction("Entities", "AVG_AGE1")]
        public virtual IQueryable<AVG_AGE1_Result> AVG_AGE1(Nullable<int> idGroup)
        {
            var idGroupParameter = idGroup.HasValue ?
                new ObjectParameter("idGroup", idGroup) :
                new ObjectParameter("idGroup", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<AVG_AGE1_Result>("[Entities].[AVG_AGE1](@idGroup)", idGroupParameter);
        }
    
        [DbFunction("Entities", "GETLessCount")]
        public virtual IQueryable<GETLessCount_Result> GETLessCount(Nullable<int> idStudent)
        {
            var idStudentParameter = idStudent.HasValue ?
                new ObjectParameter("idStudent", idStudent) :
                new ObjectParameter("idStudent", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GETLessCount_Result>("[Entities].[GETLessCount](@idStudent)", idStudentParameter);
        }
    
        public virtual int AddStudentInGroup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddStudentInGroup");
        }
    
        public virtual ObjectResult<CarUse_Result> CarUse(string titleCategory)
        {
            var titleCategoryParameter = titleCategory != null ?
                new ObjectParameter("TitleCategory", titleCategory) :
                new ObjectParameter("TitleCategory", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CarUse_Result>("CarUse", titleCategoryParameter);
        }
    
        public virtual ObjectResult<SellCarState1_Result> SellCarState1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SellCarState1_Result>("SellCarState1");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<StudentCategory_Result> StudentCategory(string nameCategory)
        {
            var nameCategoryParameter = nameCategory != null ?
                new ObjectParameter("NameCategory", nameCategory) :
                new ObjectParameter("NameCategory", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StudentCategory_Result>("StudentCategory", nameCategoryParameter);
        }
    }
}
